y <- 8:12
y
# 2차원 매트릭스
# 칸으로 합치기
sum.xy <- cbind(x, y)
sum.xy
#
sum1.xy <- rbind(x, y)
sum1.xy
x <- 1:5
y <- 101:105
z <- 201:205
sum.xyz <- rbind(x, y, z)
sum.xyz
bind.xyz <- rbind(x, y, z)
bind.xyz
v1 <- c(12,11,10)
v2 <- c(8,7,6)
v3 <- c(4,3,2)
z <- rbind(v1, v2, v3)
z
v1 <- c(12,11,10,9)
v2 <- c(8,7,6,5)
v3 <- c(4,3,2,1)
z <- rbind(v1, v2, v3)
z
v1 <- c(12:9)
v2 <- c(8:5)
v3 <- c(4:1)
z <- rbind(v1, v2, v3)
z
# 매트릭스로 한번에 만들기
z <- matrix(12:1, nrow=3, ncol=4, byrow = T)
# 매트릭스로 한번에 만들기
z <- matrix(12:1, nrow=3, ncol=4, byrow = T)
z
row.names(z) <- c('v1','v2','v3')
z
# 5를 검색하기
z[2,4]
z[3,2]
z <- [1, ]
z <- [1,]
z[1,]
z[,2]
z[c(1,3)]
z[c(1,3),]
#
z[,c(2,4)]
# 2~4열 꺼내기
z[,2:4]
# 행이름 주기
# 열이름 주기
score <- matrix(c(90,85,69,78,85,96,49,95,90,80,70,60))
# 행이름 주기
# 열이름 주기
score <- matrix(c(90,85,69,78,85,96,49,95,90,80,70,60), nrow=4, ncol=3)
score
rownames(score) <- c('Jon','Tom','Mark','Jane')
colnames(score) <- c('Eng','Math','Science')
score
score[2,2]
score['Tom','Math']
score[4,3]
score['Jane','Eng']
score['Tom',]
score[,'Math']
# 수학 점수의 평균
mean(score[,'Math'])
# 학생의 이름
rownames(score)
# 과목명
colnames(score)
# 2번째 학생명은
rownames(score)[2]
# 3번째 과목명은
colnames(score)[3]
# 1-1
z <- matrix(12:1, nrow = 3, ncol = 4)
z
# 1-1
z <- matrix(12:1, nrow = 3, ncol = 4, byrow = T)
z
rownames(z) <- c('v1','v2','v3')
z
#1-2
colnames(z) <- c('a1','a2','a3','a4')
z
#1-3
v4 <- 1:7[v4%%2==1]
#1-3
v4 <- seq(1,7,2)
v4
z <- rbind(z,v4)
z
# 1-4
z[4,]
# 1-5
z[2:4,c(a1,a3)]
# 1-5
z[2:4,(a1,a3)]
# 1-5
z[2:4,c('a1','a3')]
# 1-6
rownames(z)[3]
#1-7
colnames(z)[3]
# 데이터 프레임
city <- c('서울','도쿄','워싱턴')
rank <- c(1,3,2)
city.info <- data.frame(city,rank)
city.info
etc <- c(TRUE, TRUE, FALSE)
city.info <- data.frame(city,rank)
city.info
city.info <- data.frame(city,rank,etc)
city.info
View(people)
city.info[2, 'city']
city.info[1, 'rank']
rownames(city.info)
colnames(city.info)
iris
head(iris)
tail(iris)
head(iris, n=10)
head(iris, c(1:2))
head(iris[,'Petal.width'])
dim(iris)
str(iris)
head(iris[,'Petal.width'])
iris[,5]
unique(iris[,5])
table(iris[,"Species"])
colSums(iris)
colSums(iris[,])
colSums(iris[,-5])
colMeans(iris[,-5])
rowSums(iris[,-5])
rowMeans(iris[,-5])
rowMeans(iris[,'Species'])
# 2-1
state.x77
# 2-1
st <- state.x77
st
colnames(st)
# 2-4
rownames(st)
# 2-5
dim(st)
# 2-6
head(st)
# 2-7
rowSums(st)
rowMeans(st)
# 2-8
colSums(st)
colMeans(st)
# 2-9
st['Florida',]
# 2-10
st[,'Income']
# 2-11
st['Texas','Area']
# 2-12
st['Ohio', c('Population','Income')]
# 2-13
rownames(st)['Population'>5000]
# 2-15
rowSums(st)['Income'>4500]
# 2-15
rowSums(rownames(st))['Income'>4500]
# 2-15
Sum(rownames(st))['Income'>4500]
# 2-15
sum(rownames(st))['Income'>4500]
# 2-15
sum(rownames(st)['Income'>4500])
# 2-15
rownames(st)['Income'>4500]
# 2-15
nrow(rownames(st)['Income'>4500])
# 2-15
nrow['Income'>4500]
# 2-15
nrow(st)['Income'>4500]
# 2-16
st(['Area'>100000 & 'Frost'>120],)
# 2-16
ju <- st
# 2-16
st(['Area'>100000 & 'Frost'>120],)
# 2-16
st[['Area'>100000 & 'Frost'>120],]
# 2-16
st[c(['Area'>100000 & 'Frost'>120]),]
# 2-16
st[('Area'>10000&'Frost'>120),]
# 2-16
st[('Area'>10000&'Frost'>=120),]
# 2-17
st[('Population')<2000&'Murder'<12,]
# 2-16
st[('Area'>=10000&'Frost'>=120),]
# 2-18
mean(st['Illiteracy'>=2.0],'Income')
# 2-18
mean(st['Illiteracy'>=2.0,'Income'])
# 2-19
mean(st['Illiteracy'<2.0,'Income']-st['Illiteracy'>=2.0,'Income'])
# 2-19
mean(st['Illiteracy'<2.0,'Income'])-mena(st['Illiteracy'>=2.0,'Income'])
# 2-19
mean(st['Illiteracy'<2.0,'Income'])-mean(st['Illiteracy'>=2.0,'Income'])
# 2-19
mean(st['Illiteracy'>=2.0,'Income'])-mean(st['Illiteracy'<2.0,'Income'])
# 2-20
st[,max('Life Exp')]
# 2-20
rownames(st)[,max('Life Exp')]
# 2-20
rownames(st)[max('Life Exp')]
# 2-20
rownames(st[,max('Life Exp')])
# 2-20
st[,max('Life Exp')]
# 2-19
mean(st['Illiteracy'<2.0,'Income'])
# 2-18
mean(st['Illiteracy'>=2.0,'Income'])
# 2-19
mean(st['Illiteracy'<2.0,'Income'])
# 2-19
mean(st[,'Income'])
# 2-19
mean(st['Illiteracy'>=2.0,'Income'])
# 2-19
a<- mean(st['Illiteracy'>=2.0,'Income'])
b<- mean(st['Illiteracy'<2.0,'Income'])
# 2-16
st[('Area'>=10000&'Frost'>=120),]
# 2-16
st[, ('Area'>=10000&'Frost'>=120)]
# 2-16
st[, ('Area'>=10000 & 'Frost'>=120)]
# 2-16
st[, ('Area'>=10000)]
# 2-16
st[, 'Area'>=10000 ]
# 데이터 프레임
city <- c('서울','도쿄','워싱턴')
rank <- c(1,3,2)
etc <- c(TRUE, TRUE, FALSE)
city.info <- data.frame(city,rank,etc)
city.info
city.info[2, 'city']
rownames(city.info)
colnames(city.info)
# 행과 열을 바꾸기
t(city,info)
# 행과 열을 바꾸기
t(city.info)
# 2-13
subset(st,'Population'>=5000)
# 2-13
subset(st,'Population'==>5000)
# 2-13
subset(st,'Population'==5000)
# 2-13
subset(st,Population >=5000)
# 2-13
subset(st,Population = >5000)
# 2-13
subset(st,Population =>5000)
# 2-13
subset(st,'Population' >= 5000)
# 2-13
subset(st,Population >= 5000)
# 2-1
st <- state.x77
# 2-2
st
# 2-3
colnames(st)
# 2-4
rownames(st)
# 2-13
subset(st,Population >= 5000)
# 2-13
subset(st,'Population' >= 5000)
# 2-13
= subset(st,'Population' >= 5000)
# 2-13
subset(st,'Population' >= 5000)
# 2-13
subset(st,'Population' > 5000)
# 2-12
st['Ohio', c('Population','Income')]
# 2-13
subset(st,Population >= 5000)
# 2-1
st <- data.frame(state.x77)
# 2-2
st
# 2-9
st['Florida',]
# 2-10
st[,'Income']
# 2-11
st['Texas','Area']
# 2-12
st['Ohio', c('Population','Income')]
# 2-13
subset(st, Population >= 5000)
# 2-14
subset(st[,c('Population','Income','Area')], Income >=4500)
# 2-15
nrow(subset(st, Income >=4500))
# 2-16
subset(st, Area >= 100000 & Frost >= 120)
# 2-17
subset(st, Population < 2000 & Murder <12)
# 2-18
mean(subset(st, Illiteracy >= 2.0))
# 2-18
mean(subset(,Illiteracy >= 2.0))
# 2-18
mean(st[,'Income'])
# 2-18
mean(subset(st[,'Income'], Illiteracy >= 2.0))
# 2-18
mean(subset(st[,'Income'], Illiteracy >= 2.0))
# 2-18
mean(subset(st[,'Income'], 'Illiteracy >= 2.0'))
# 2-18
mean(subset(st[,'Income'], 'Illiteracy' >= 2.0))
# 2-18
mean(subset(st[,'Income'], Illiteracy >= 2.0))
# 2-1
st <- data.frame(state.x77)
# 2-18
mean(subset(st[,'Income'], Illiteracy >= 2.0))
# 2-20
subset(st, max('Life Exp'))
# 2-20
subset(st, max(Life Exp))
# 2-20
subset(st, max(Life.Exp))
# 2-20
subset(st, max('Life.Exp'))
# 2-21
subset(st, Income > Pennsylvania)
# 2-21
subset(st, Income > 'Pennsylvania')
# 2-14
subset(st, Income >=4500)[,c('Population','Income','Area')]
# 2-18
mean(subset(st, Illiteracy >= 2.0)[,'Income'])
# 2-19
mean(subset(st, Illiteracy >= 2.0)[,'Income'])-mean(subset(st, Illiteracy < 2.0)[,'Income'])
# 2-19
mean(subset(st, Illiteracy < 2.0)[,'Income'])-mean(subset(st, Illiteracy >= 2.0)[,'Income'])
# 2-21
subset(st, Income > st['Pennsylvania',])
# 2-21
rownames(subset(st, Income > st['Pennsylvania',]))
# 2-20
subset(st, max(st[,'Life.Exp'])
# 2-20
subset(st, max(st[,'Life.Exp']))
# 2-20
subset(st, max(st[,'Life.Exp']))
# 2-20
max(st[,'Life.Exp'])
subset(st, Life.exp == max(st[,'Life.Exp']))
subset(st, Life.Exp == max(st[,'Life.Exp']))
rownames(subset(st, Life.Exp == max(st[,'Life.Exp'])))
# 2-21
Pen.Income <- st['Pennsylvania','Income']
rownames(subset(st, Income > Pen.Income)
rownames(subset(st, Income > Pen.Income))
subset(st, Income >= Pen.Income)
rownames(subset(st, Income >= Pen.Income))
# 2.5 연산자
a <- matrix(1:20, nrow=4, ncol=5)
# 2.5 연산자
a <- matrix(1:20,4,5)
a
b <- matrix(21:40, nrow = 4, ncol = 5)
b
2*a
b-5
a+b
class(iris)
class(state.x77)
class(islands)
class(lh)
is.matrix(iris)
is.data.frame(iris)
data.frame(state.x77)
st <- data.frame(state.x77)
class(st)
class(iris)
as.matrix(iris)
as.im <- as.matrix(iris)
as.jm <- as.matrix(iris)
class(as.jm)
as.im <- as.matrix(iris)
class(as.im)
as.im <- as.matrix(iris[,-5])
# 열추출하기
class(iris)
class(state.x77)
iris[,'species']
iris[,'Species']
head(state.x77)
state.x77[,'Area']
iris[,5]
state.x77[,8]
iris['Species']
state.x77['Area']
iris[5]
state.x77[8]
iris$Species
state.x77$Area
# 3-1
name <- c('Tom','Jane','Nick')
age <- c(20,23,26)
gender <- c('M','F','M')
height <- c(180,160,175)
student <- c(TRUE,TRUE,FALSE)
human <- data.frame(name,age,gender,height,student)
human
# 3-2
list('Mary',24,'F',155,TRUE)
human <- rbind(human,list)
human1 <- rbind(human,list)
# 3-2
human <- list('Mary',24,'F',155,TRUE)
human
human <- data.frame(name,age,gender,height,student)
human
# 3-2
list(name='Mary',age=24,gender='F',height=155,student=TRUE)
# 3-2
human.new <- list(name='Mary',age=24,gender='F',height=155,student=TRUE)
rbind(human,human.new)
human <- rbind(human,human.new)
hyuman
human
# 3-3
str(human)
# 3-4
mean(human[,'age'])
mean(human[,'height'])
# 3-5
rownames(human[,4])
# 3-5
rownames(human[,-4])
# 3-5
colnames(human[,-4])
# 3-6
ncol(human[,'gender'])
# 3-6
nrow(human[,'gender'])
# 3-6
table(human[gender])
# 3-6
table(human$gender)
# 파일 불러오기
setwd(D:\ai\study\r_study)
# 파일 불러오기
setwd("D:\ai\study\r_study")
# 파일 불러오기
setwd('D:\ai\study\r_study')
read.csv('D:/ai/study/r_study/airquality.csv')
read.csv('airquality.csv')
# 파일 불러오기
setwd('D:/ai/study/r_study')
read.csv('airquality.csv')
air <- read.csv('airquality.csv')
air
class(air)
air <- read.csv('D:/ai/study/r_study/airquality.csv')
air
head(air)
air['Ozone']
air <- read.csv(file.choose())
air3 <- read.csv(file.choose())
head(air3)
# 저장하기
subset(iris,Species == 'sectosa')
# iris에서 Sqecies == 'setosa'인 것만 저장하기
subset(iris,Species == 'setosa')
write.csv()
write.csv(iris.setosa,'irisfilesame.csv')
# iris에서 Sqecies == 'setosa'인 것만 저장하기
subset(iris,Species == 'setosa')
write.csv(iris.setosa,'irisfilesame.csv')
# iris에서 Sqecies == 'setosa'인 것만 저장하기
subset(iris.Species == 'setosa')
# iris에서 Sqecies == 'setosa'인 것만 저장하기
subset(iris, iris.Species == 'setosa')
# iris에서 Sqecies == 'setosa'인 것만 저장하기
iris.setosa <- subset(iris, Species == 'setosa')
write.csv(iris.setosa,'irisfilesame.csv')
# 첫째 열에는 열 번호가 있다 이 부분을 저장에서 제외하고 싶다.
write.csv(iris.setosa, 'irisfilesame.csv', row.names = F)
# 첫째 열에는 열 번호가 있다 이 부분을 저장에서 제외하고 싶다.
write.csv(iris.setosa, 'irisfile.csv', row.names = F)
write.csv(iris.setosa, file.choose())
